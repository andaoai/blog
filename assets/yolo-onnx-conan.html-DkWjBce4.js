import{_ as a,c as s,b as t,o as e}from"./app-BIgzetNK.js";const l={};function i(o,n){return e(),s("div",null,[...n[0]||(n[0]=[t(`<h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h2><p>最近本人的想法是， onnx + opencv 的yolo c++库，实现yolo在c++直接推理，但是看见一堆依赖，确实难以令人入手。便是想到了vcpkg和conan，这两个。但是这两个我压根并没有完全知道哪一个好用，我便从我的技术栈角度去考虑。</p><h3 id="完整对比表格" tabindex="-1"><a class="header-anchor" href="#完整对比表格"><span>完整对比表格</span></a></h3><table><thead><tr><th>维度</th><th><strong>Conan</strong></th><th><strong>vcpkg</strong></th></tr></thead><tbody><tr><td><strong>核心设计</strong></td><td>去中心化包管理器，支持跨平台、跨构建系统，依赖描述通过 conanfile.txt/py 定义</td><td>由微软维护的本地包管理器，侧重 Windows/MSVC，通过文件或 CMake 集成</td></tr><tr><td><strong>维护方</strong></td><td>JFrog（2020 年收购 Conan）</td><td>Microsoft</td></tr><tr><td><strong>首次发布</strong></td><td>2016 年</td><td>2015 年</td></tr><tr><td><strong>维护年限（截至 2024）</strong></td><td>8 年</td><td>9 年</td></tr><tr><td><strong>CI/CD 支持</strong></td><td>★★★★★ 提供缓存、并行构建、制品上传下载等完整支持</td><td>★★☆ Dependabot 可自动更新基线，但编译缓存需手动处理</td></tr><tr><td><strong>VS Code 支持</strong></td><td>★★★★ 通过官方插件 Conan for VS Code 实现语法高亮、自动补全、包搜索与安装</td><td>★★★★ 官方提供 vcpkg.json 文件支持，VS Code 可自动识别并提示依赖管理</td></tr></tbody></table><h3 id="适用场景总结" tabindex="-1"><a class="header-anchor" href="#适用场景总结"><span>适用场景总结</span></a></h3><ul><li><strong>Conan</strong>：适合需要高度定制、跨平台、跨构建系统的项目，尤其适合 CI/CD 环境。</li><li><strong>vcpkg</strong>：适合主要在 Windows 平台开发或需要快速引入常用库的项目。</li></ul><h3 id="因为本人比较熟悉python-也比较重视ci-cd这个操作-同时还有一点-大部分推理的设备都是ubuntu系统开发-使用vcpkg可能不会有太好的效果-便选择conan进行对c-的依赖管理。" tabindex="-1"><a class="header-anchor" href="#因为本人比较熟悉python-也比较重视ci-cd这个操作-同时还有一点-大部分推理的设备都是ubuntu系统开发-使用vcpkg可能不会有太好的效果-便选择conan进行对c-的依赖管理。"><span>因为本人比较熟悉Python，也比较重视CI/CD这个操作，同时还有一点，大部分推理的设备都是Ubuntu系统开发，使用vcpkg可能不会有太好的效果，便选择conan进行对c++的依赖管理。</span></a></h3><h2 id="conan概念" tabindex="-1"><a class="header-anchor" href="#conan概念"><span>Conan概念</span></a></h2><p>Conan 是 C/C++ 的开源包管理器，解决依赖管理复杂、跨平台构建困难等问题，核心概念包括跨平台支持、自动化依赖解析、可重复构建、版本控制、去中心化架构、二进制管理等。它支持多操作系统和构建系统，允许通过配置文件定义依赖，并与 CMake 等工具集成。以下将简要介绍其核心概念、工作原理及使用方法。</p><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><ul><li><strong>跨平台支持</strong>：Conan 支持 Windows、Linux、macOS 等主流操作系统，以及 iOS、Android 等移动端平台。它能够处理不同平台、编译器、构建类型等配置下的依赖管理。</li><li><strong>自动化依赖解析</strong>：Conan 能够自动解析项目依赖关系，处理版本冲突，并确保构建环境的一致性。</li><li><strong>可重复构建和版本控制</strong>：Conan 通过锁定文件（lockfile）确保项目在不同环境中使用相同的依赖版本，提升构建的可重复性。</li><li><strong>去中心化架构</strong>：Conan 采用客户端-服务器架构，支持本地和远程仓库。用户可以私有化部署服务器，托管私有包和二进制文件。</li><li><strong>二进制管理</strong>：Conan 支持管理预编译的二进制文件，针对不同配置（如操作系统、架构、编译器版本等）生成和存储不同的二进制文件。</li></ul><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><ul><li><strong>客户端-服务器模型</strong>：Conan 的客户端（命令行工具）可以从不同的服务器（远程仓库）获取包，也可以将包上传到服务器，类似于 Git 的 push-pull 模型。</li><li><strong>包的标识</strong>：一个包在 Conan 中由包名、版本、用户和渠道唯一标识，例如 fmt/8.0.1@user/channel。</li></ul><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h3><ul><li><strong>安装 Conan</strong>：Conan 是用 Python 编写的，可以通过 pip 安装：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> conan</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>配置项目依赖</strong>：在项目目录中创建 conanfile.txt 或 conanfile.py 文件，定义所需的库依赖。以下是一个 conanfile.txt 文件的示例：</li></ul><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">[requires]</span>
<span class="line">fmt/8.0.1</span>
<span class="line">spdlog/1.9.2</span>
<span class="line">[generators]</span>
<span class="line">cmake</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>安装依赖</strong>：使用 conan install 命令安装依赖：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">conan <span class="token function">install</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--build</span><span class="token operator">=</span>missing</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>集成到构建系统</strong>：Conan 支持生成 CMake、Visual Studio、Makefiles 等的构建配置文件。例如，在 CMakeLists.txt 中包含生成的 Conan 文件：</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="prismjs" data-ext="cmake" data-title="cmake"><pre><code><span class="line"><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">CMAKE_BINARY_DIR</span><span class="token punctuation">}</span>/conanbuildinfo.cmake<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">conan_basic_setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,22)])])}const d=a(l,[["render",i]]),c=JSON.parse('{"path":"/ai/yolo-onnx-conan.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"需求","slug":"需求","link":"#需求","children":[{"level":3,"title":"完整对比表格","slug":"完整对比表格","link":"#完整对比表格","children":[]},{"level":3,"title":"适用场景总结","slug":"适用场景总结","link":"#适用场景总结","children":[]},{"level":3,"title":"因为本人比较熟悉Python，也比较重视CI/CD这个操作，同时还有一点，大部分推理的设备都是Ubuntu系统开发，使用vcpkg可能不会有太好的效果，便选择conan进行对c++的依赖管理。","slug":"因为本人比较熟悉python-也比较重视ci-cd这个操作-同时还有一点-大部分推理的设备都是ubuntu系统开发-使用vcpkg可能不会有太好的效果-便选择conan进行对c-的依赖管理。","link":"#因为本人比较熟悉python-也比较重视ci-cd这个操作-同时还有一点-大部分推理的设备都是ubuntu系统开发-使用vcpkg可能不会有太好的效果-便选择conan进行对c-的依赖管理。","children":[]}]},{"level":2,"title":"Conan概念","slug":"conan概念","link":"#conan概念","children":[{"level":3,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":3,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]}]}],"git":{"updatedTime":1756536743000,"contributors":[{"name":"AnDaoAi","email":"55041866+andaoai@users.noreply.github.com","commits":1}]},"filePathRelative":"ai/yolo-onnx-conan.md"}');export{d as comp,c as data};
